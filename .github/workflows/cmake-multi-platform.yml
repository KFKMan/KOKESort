name: CMake on multiple platforms

on:
  push:
    branches: [ "main" ]
    paths:
      - '.github/workflows/cmake-multi-platform.yml'
      - 'src/**'
  pull_request:
    branches: [ "main" ]
    paths:
      - '.github/workflows/cmake-multi-platform.yml'
      - 'src/**'

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
          - os: macos-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl
          - os: macos-latest
            c_compiler: gcc
          - os: macos-latest
            c_compiler: cl

    steps:
      - uses: actions/checkout@v4

      - name: Set reusable strings
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

      - name: Install coverage tools (Ubuntu only)
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt update && sudo apt install -y lcov

      - name: Set CMake coverage flag
        id: coverage
        shell: bash
        run: |
          if [ "${{ matrix.os }}" = "ubuntu-latest" ] && [ "${{ matrix.c_compiler }}" != "cl" ]; then
            echo "coverage_flag=-DENABLE_COVERAGE=ON" >> "$GITHUB_OUTPUT"
          else
            echo "coverage_flag=" >> "$GITHUB_OUTPUT"
          fi

      - name: Configure CMake
        run: >
          cmake -B ${{ steps.strings.outputs.build-output-dir }}
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          ${{ steps.coverage.outputs.coverage_flag }}
          -S ${{ github.workspace }}/src

      - name: Build
        run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

      - name: Test
        working-directory: ${{ steps.strings.outputs.build-output-dir }}
        run: ctest --verbose --build-config ${{ matrix.build_type }}

      - name: Capture coverage (Ubuntu only)
        if: matrix.os == 'ubuntu-latest' && matrix.c_compiler != 'cl'
        working-directory: ${{ steps.strings.outputs.build-output-dir }}
        run: |
          lcov --capture --directory . --output-file coverage.info --ignore-errors version --ignore-errors gcov
          lcov --remove coverage.info '/usr/*' --output-file coverage.info --ignore-errors unused --ignore-errors version --ignore-errors gcov
          genhtml coverage.info --output-directory coverage_report --ignore-errors gcov

      - name: Upload coverage report (Ubuntu only)
        if: matrix.os == 'ubuntu-latest' && matrix.c_compiler != 'cl'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-${{ matrix.c_compiler }}
          path: ${{ steps.strings.outputs.build-output-dir }}/coverage_report